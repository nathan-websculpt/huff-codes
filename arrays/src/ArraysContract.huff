#define function pushToMyArray(uint256) nonpayable returns()
#define function popFromMyArray() nonpayable returns()
#define function getLengthOfMyArray() view returns (uint256)
// #define function getValAtIndexOfMyArray(uint256) view returns (uint256)
#define function getValAtIndexOfMyArray(uint256) view returns (bytes32)

// started from:
// https://github.com/Kuly14/Huff-Arrays/blob/main/src/DynamicArray.huff
#define constant ARRAY = FREE_STORAGE_POINTER()


#define macro GET() = takes(0) returns(0) {
    0x04 calldataload           // [index]
    [ARRAY]                     // [ARRAY_PTR, index]
    0x00 mstore                 // [index]
    0x20 0x00                   // [memOffset, size, index]
    sha3                        // [hash, index]

    [ARRAY] sload               // [Arr_size, hash, index]
    dup3                        // [index, Arr_size, hash, index]
    gt                          // [index > Arr_size, hash, index]
    outOfBounds
    jumpi                       // [hash, index]

    add                         // [hash + index]
    sload                       // [Result]
    0x20 mstore                 // []
    0x20 0x20                   // [memOffset, size]
    return                      // []

    outOfBounds:
        0x00 0x00 
        revert
}


#define macro POP() = takes(0) returns(0) {
    [ARRAY]                     // [ARRAY_PTR]
    0x00 mstore                 // []
    0x20 0x00                   // [memOffset, size]
    sha3                        // [hash]

    [ARRAY] sload               // [Array_length, hash]
    0x01 swap1                  // [Array_length, 0x01, hash]
    sub                         // [Array_length - 1, hash]

    add                         // [Last_item + hash]

    0x00                        // [0, LastStorageSlot]
    swap1                       // [LastStorageSlot, 0]
    sstore                      // []
}


#define macro PUSH() = takes(0) returns(0) {
    [ARRAY]                     // [ARRAY_PTR]
    0x00 mstore                 // []

    0x20 0x00                   // [memOffset, size]
    sha3                        // [hash]

    [ARRAY] sload               // [length, hash]

    dup1                        // [length, length, hash]
    swap2                       // [hash, length, length]
    add                         // [newStorageSlot, length]

    0x04 calldataload           // [arg, newStorageSlot, length]
    swap1                       // [newStorageSlot, arg, length]

    sstore                      // [length]

    0x01 add                    // [0x01 + length]
    [ARRAY]                     // [newLength, ARRAY_PTR]
    swap1                       // [ARRAY_PTR, newLength]
    sstore                      // []
}


#define macro LENGTH() = takes(0) returns(0) {
    [ARRAY] sload               // [ARRAY_LENGTH]
    0x00 mstore                 // []

    0x20 0x00                   // [memOffset, Size]
    return                      // []
}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG(pushToMyArray) eq push jumpi
    dup1 __FUNC_SIG(popFromMyArray) eq popLast jumpi
    dup1 __FUNC_SIG(getValAtIndexOfMyArray) eq get jumpi
    dup1 __FUNC_SIG(getLengthOfMyArray) eq length jumpi

    push:
        PUSH()
    popLast:
        POP()    
    get:
        GET()
    length:
        LENGTH()

    0x00 0x00
    revert
}

